name: CI
on:
  repository_dispatch:
    types:
      - webhook-1
      - webhook-2
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        include:
          - configuration: 'Debug'
            platform: 'x64d_md_no_v8'
          - configuration: 'Release'
            platform: 'x64_md_no_v8'
    steps:
      - name: Checkout

        shell: bash
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools
          ls
          export PATH=${PWD}/depot_tools:$PATH
          export DEPOT_TOOLS_WIN_TOOLCHAIN=0
          echo %PATH%
          git config --global core.autocrlf false
          git config --global core.filemode false
          git config --global core.fscache true
          git config --global core.preloadindex true
          git config --global depot-tools.allowGlobalGitConfig false

          # mkdir pdfium
          # echo "11" >pdfium/1.txt
          gclient config --unmanaged https://pdfium.googlesource.com/pdfium.git

          # 克隆仓库，只获取最新的提交历史
          git clone --depth 1 https://pdfium.googlesource.com/pdfium.git
          cd pdfium
          
          # 获取特定的提交
          git fetch --depth=1 origin 467e8dde57c687bb7ec9452fa2620f000cfe849a
          
          # 检出特定的提交
          git checkout 467e8dde57c687bb7ec9452fa2620f000cfe849a
          cd ..
          gclient sync
          
          # gclient sync
          # cd pdfium
          # git clean -dfx
          # git reset --hard 467e8dde57c687bb7ec9452fa2620f000cfe849a
          # cd ../
          # gclient sync

          git clone https://oauth2:${{ secrets.GITEE_TOKEN  }}@gitee.com/charlesabc/myutils.git ./myutils
          mkdir pdfium/out
          cp myutils/pdfium/package.sh pdfium/out
          cp -r myutils/pdfium/md pdfium/out
          mkdir pdfium/out/include
          echo "111" >> pdfium/out/include/1.txt
          

          # is_debug=true
      - name: Set up GN args
        shell: bash
        run: |
          cd pdfium
          mkdir -p out/${{ matrix.platform }}
          cat << EOF > out/${{ matrix.platform }}/args.gn
          use_goma=false
          clang_use_chrome_plugins=false
          pdf_is_standalone=true
          pdf_use_skia=false
          pdf_use_skia_paths=false
          is_component_build=false
          pdf_is_complete_lib=true
          pdf_enable_xfa=false
          pdf_enable_v8=false
          target_cpu="x64"
          is_clang=false
          EOF
          
          if [ "${{ matrix.platform }}" == "x64d_md_no_v8" ]; then
             echo "is_debug=true" >> out/${{ matrix.platform }}/args.gn
             cat out/${{ matrix.platform }}/args.gn
          else
             echo "is_debug=false" >> out/${{ matrix.platform }}/args.gn
             cat out/${{ matrix.platform }}/args.gn
          fi

      - name: Run GN
        shell: bash
        run: |
          ls 
          export PATH=${PWD}/depot_tools:$PATH
          export DEPOT_TOOLS_WIN_TOOLCHAIN=0
          cd pdfium
          gn gen out/${{ matrix.platform }}
          ls out/${{ matrix.platform }}
          
      
      - name: build pdfium
        shell: cmd
        run: |
        
          set PATH=%cd%\depot_tools;%PATH%
          set DEPOT_TOOLS_WIN_TOOLCHAIN=0
          set GYP_MSVS_VERSION=2019
          set GYP_MSVS_OVERRIDE_PATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community
          set DEPOT_TOOLS_UPDATE=0
          set NINJA_SUMMARIZE_BUILD=1
          cd pdfium
          ninja -C out/${{ matrix.platform }} pdfium

          dir out/${{ matrix.platform }}/obj
        

          
          
  # create-release:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Set up environment
  #       run: echo "RELEASE_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

  #     - name: Install GitHub CLI
  #       uses: sersoft-gmbh/setup-gh-cli-action@v2

  #     - name: Delete existing release
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: gh release delete $RELEASE_DATE --yes || true

  #     - name: Create new release
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: gh release create $RELEASE_DATE -t "Release $RELEASE_DATE" -n "Automated release for $RELEASE_DATE"

  #     - name: Download Artifacts
  #       run: |
  #         mkdir -p ./artifacts
  #         wget -O ./artifacts/x64_rel_md_no_v8.zip https://download.happygogo.site/x64_rel_md_no_v8.zip
  #         wget -O ./artifacts/x64_dbg_md_no_v8.zip https://download.happygogo.site/x64_dbg_md_no_v8.zip
  #         wget -O ./artifacts/x64_rel_no_v8.zip https://download.happygogo.site/x64_rel_no_v8.zip
  #         wget -O ./artifacts/x64_dbg_no_v8.zip https://download.happygogo.site/x64_dbg_no_v8.zip



  #     - name: List Zipped Files
  #       run: ls ./artifacts/*.zip

  #     - name: Generate MD5 Checksums
  #       run: |
  #         > ./artifacts/filelist.txt  # 清空或创建 filelist.txt 文件
  #         for file in ./artifacts/*.zip; do
  #           # Calculate MD5 checksum
  #           md5sum=$(md5sum "$file" | awk '{ print $1 }')
            
  #           # Write to filelist.txt
  #           echo "$(basename "$file") | ${md5sum}" >> ./artifacts/filelist.txt
  #         done

  #     - name: Upload Artifacts to Release
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         cd ./artifacts
  #         gh release upload $RELEASE_DATE ./*.zip
  #         gh release upload $RELEASE_DATE ./filelist.txt
