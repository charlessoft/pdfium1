name: CI
on:
  repository_dispatch:
    types:
      - webhook-1
      - webhook-2
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]



jobs:
  build:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        include:
          - configuration: 'Debug'
            platform: 'x64_dbg_md_no_v8'
          - configuration: 'Release'
            platform: 'x64_rel_md_no_v8'
    steps:
      - name: List Windows SDKs
        run: |
          reg query "HKLM\SOFTWARE\Microsoft\Windows Kits\Installed Roots"
          dir "C:\Program Files (x86)\Windows Kits\10"
          Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\Include" | Select-Object Name
    
      - name: Checkout

        shell: bash
        run: |
          sync --
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools
          ls
          export PATH=${PWD}/depot_tools:$PATH
          export DEPOT_TOOLS_WIN_TOOLCHAIN=0
          echo %PATH%
          git config --global core.autocrlf false
          git config --global core.filemode false
          git config --global core.fscache true
          git config --global core.preloadindex true
          git config --global depot-tools.allowGlobalGitConfig false

          # mkdir pdfium
          # echo "11" >pdfium/1.txt
          gclient config --unmanaged https://pdfium.googlesource.com/pdfium.git

          #git clone --depth 1 https://pdfium.googlesource.com/pdfium.git







          gclient sync



          #cd pdfium
          cd pdfium
          git reset --hard d4c2dadd7
          cd ..

          
          #gclient sync
          #cd pdfium
          cd pdfium
          #git reset --hard d4c2dadd7
          cd ..

        
          git clone https://oauth2:${{ secrets.GITEE_TOKEN  }}@gitee.com/charlesabc/myutils.git ./myutils
          mkdir pdfium/out
          cp myutils/pdfium/*.sh pdfium/out
          cp -r myutils/pdfium/md pdfium/out
          cp -r myutils/pdfium/core pdfium/out
          mkdir pdfium/out/include


         
          cp -r myutils/pdfium/package.sh ./pdfium/out
          

          cd ./pdfium/out/md
          sh set_md.sh
          cd ../
          
          sh patch_core.sh
          sh copy_include.sh
          ls ./include
          ls .
          
          


          # is_debug=true
      - name: Set up GN args
        shell: bash
        run: |
          cd pdfium
          mkdir -p out/${{ matrix.platform }}
          cat << EOF > out/${{ matrix.platform }}/args.gn
          use_goma=false
          clang_use_chrome_plugins=false
          pdf_is_standalone=true
          pdf_use_skia=false
          pdf_use_skia_paths=false
          is_component_build=false
          pdf_is_complete_lib=true
          pdf_enable_xfa=false
          pdf_enable_v8=false
          target_cpu="x64"
          is_clang=true
          use_custom_libcxx = false         # 关键：禁用 libc++，改用 MSVC STL
          EOF
          
          if [ "${{ matrix.platform }}" == "x64_dbg_md_no_v8" ]; then
             echo "is_debug=true" >> out/${{ matrix.platform }}/args.gn
             echo "enable_iterator_debugging = false" >> out/${{ matrix.platform }}/args.gn
             echo "pdf_use_partition_alloc = false" >> out/${{ matrix.platform }}/args.gn
             echo "use_allocator_shim = false" >> out/${{ matrix.platform }}/args.gn
             cat out/${{ matrix.platform }}/args.gn
          else
             echo "is_debug=false" >> out/${{ matrix.platform }}/args.gn
             echo "pdf_use_partition_alloc = false" >> out/${{ matrix.platform }}/args.gn
             echo "use_allocator_shim = false" >> out/${{ matrix.platform }}/args.gn
             cat out/${{ matrix.platform }}/args.gn
          fi

      - name: Run GN
        shell: bash
        run: |
          ls 
          export PATH=${PWD}/depot_tools:$PATH
          export DEPOT_TOOLS_WIN_TOOLCHAIN=0
          cd pdfium
          gn gen out/${{ matrix.platform }}
          ls out/${{ matrix.platform }}
          
      
      - name: build pdfium
        shell: cmd
        run: |
        
          set PATH=%cd%\depot_tools;%PATH%
          set DEPOT_TOOLS_WIN_TOOLCHAIN=0
          #set GYP_MSVS_VERSION=2019
          #set GYP_MSVS_OVERRIDE_PATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community
          set WIN_SDK_VERSION=10.0.22621.0
          set DEPOT_TOOLS_UPDATE=0
          set NINJA_SUMMARIZE_BUILD=1
          cd pdfium
          ninja -C out/${{ matrix.platform }} pdfium

          dir out/${{ matrix.platform }}/obj
        
      - name: Package  files
        # if: matrix.platform == 'x64d_md_no_v8' 
        shell: bash
        run: |
          cd pdfium/out
          mkdir -p package
          mv ./include ./package/
          mv ${{ matrix.platform }} ./package/
          ls ./package

          # 删除所有 .obj
          #find ./package -type f -name '*.obj' -print -delete
          find ./package -type f \( -name '*.obj' -o -name '*.pdb' -o -name '*.exe' -o -name '*.ninja' \) -print -delete
          echo "After cleanup:"
          find ./package -maxdepth 2 -type f | head -n 50

          rm -fr ./package/${{ matrix.platform }}/include/third_partyrust-toolchain
          rm -fr ./package/${{ matrix.platform }}/include/llvm-libc
          
      - name: Upload artifact
        # if: matrix.configuration == 'Debug' && matrix.platform == 'Win32'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: pdfium/out/package
        
          
  create-release:
    runs-on: ubuntu-latest
    needs:
      build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        run: echo "RELEASE_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Install GitHub CLI
        uses: sersoft-gmbh/setup-gh-cli-action@v2

      - name: Delete existing release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release delete $RELEASE_DATE --yes || true

      - name: Create new release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $RELEASE_DATE -t "Release $RELEASE_DATE" -n "Automated release for $RELEASE_DATE"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Download Artifacts
        run: |
          ls ./artifacts
      # - name: Download Artifacts
      #   run: |
      #     mkdir -p ./artifacts
      #     wget -O ./artifacts/x64_rel_md_no_v8.zip https://download.happygogo.site/x64_rel_md_no_v8.zip
      #     wget -O ./artifacts/x64_dbg_md_no_v8.zip https://download.happygogo.site/x64_dbg_md_no_v8.zip
      #     wget -O ./artifacts/x64_rel_no_v8.zip https://download.happygogo.site/x64_rel_no_v8.zip
      #     wget -O ./artifacts/x64_dbg_no_v8.zip https://download.happygogo.site/x64_dbg_no_v8.zip
      - name: zip libs
        run: |
          cd artifacts
          for dir in */; do
              # Check if it is a directory
              if [ -d "$dir" ]; then
                  # Enter the directory
                  cd "$dir"
          
                  # Get the directory name without trailing slash
                  dir_name="${dir%/}"
          
                  # Zip the contents of the current directory and place the zip in the artifacts root
                  zip -r "../${dir_name}.zip" ./*
          
                  # Return to the parent directory
                  cd ..
              fi
          done


      - name: List Zipped Files
        run: ls ./artifacts/*.zip

      - name: Generate MD5 Checksums
        run: |
          > ./artifacts/filelist.txt  # 清空或创建 filelist.txt 文件
          for file in ./artifacts/*.zip; do
            # Calculate MD5 checksum
            md5sum=$(md5sum "$file" | awk '{ print $1 }')
            
            # Write to filelist.txt
            echo "$(basename "$file") | ${md5sum}" >> ./artifacts/filelist.txt
          done

      - name: Upload Artifacts to Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ./artifacts
          gh release upload $RELEASE_DATE ./*.zip --clobber
          gh release upload $RELEASE_DATE ./filelist.txt --clobber
